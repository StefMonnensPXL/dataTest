pipeline {
    agent any

    environment {
        VENV_DIR = "venv"
        PYTHON = "${env.WORKSPACE}/venv/bin/python"
        PIP = "${env.WORKSPACE}/venv/bin/pip"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/StefMonnensPXL/dataTest.git', branch: 'main'
            }
        }

        stage('Setup Python Virtual Env') {
            steps {
                sh """
                    python3 -m venv ${VENV_DIR}
                    ${PIP} install --upgrade pip
                    ${PIP} install -r Project/requirements.txt
                    ${PIP} install dvc[s3]
                    ${PIP} list | grep pandas
                """
            }
        }

        stage('Debug Structure') {
            steps {
                sh """
                    echo "=== Current directory ==="
                    pwd
                    ls -la
                    
                    echo "=== Project directory ==="
                    ls -la Project/
                    
                    echo "=== Project/ingestion directory ==="
                    ls -la Project/ingestion/
                    
                    echo "=== DVC.yaml content ==="
                    cat Project/dvc.yaml
                """
            }
        }

        stage('Test Ingestion') {
            steps {
                sh """
                    echo "=== Testing ingestion script ==="
                    cd Project
                    ${PYTHON} ingestion/ingest.py
                    
                    echo "=== Checking outputs in Project/ ==="
                    ls -la
                    find . -name "*.csv" -type f
                    
                    echo "=== Checking for data directory ==="
                    ls -la data/ || echo "No data directory found"
                """
            }
        }

        stage('Track with DVC') {
    steps {
        sh """
            cd Project
            export PYTHON="${PYTHON}"
            ${PYTHON} -m dvc repro dvc.yaml
            git add dvc.yaml dvc.lock
            git commit -m "New data ingested with timestamp" || echo "Nothing to commit"
            git push origin main
            ${PYTHON} -m dvc push
        """
    }
}